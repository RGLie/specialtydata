#!/usr/bin/env tsx

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, addDoc, getDocs } from 'firebase/firestore';
import { roasteries } from '../src/data/roasteryData';
import { standardCoffees } from '../src/data/standardCoffees';
import { coffeeProducts } from '../src/data/coffeeProducts';

// Firebase ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàò ÎòêÎäî ÏßÅÏ†ë ÏÑ§Ï†ï)
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function checkCollectionExists(collectionName: string): Promise<boolean> {
  try {
    const snapshot = await getDocs(collection(db, collectionName));
    return !snapshot.empty;
  } catch (error) {
    console.error(`Error checking collection ${collectionName}:`, error);
    return false;
  }
}

async function migrateData() {
  console.log('üöÄ Firestore Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏùÑ ÏãúÏûëÌï©ÎãàÎã§...\n');
  
  try {
    // 1. Î°úÏä§ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
    console.log('üìç Î°úÏä§ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï§ë...');
    const roasteriesExists = await checkCollectionExists('roasteries');
    
    if (roasteriesExists) {
      console.log('‚ö†Ô∏è  Î°úÏä§ÌÑ∞Î¶¨ Ïª¨Î†âÏÖòÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.');
    } else {
      for (const roastery of roasteries) {
        const { id, ...roasteryData } = roastery;
        await addDoc(collection(db, 'roasteries'), {
          originalId: id,
          ...roasteryData,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      console.log(`‚úÖ ${roasteries.length}Í∞úÏùò Î°úÏä§ÌÑ∞Î¶¨ Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏôÑÎ£å`);
    }

    // 2. ÌëúÏ§Ä Ïª§Ìîº Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
    console.log('\n‚òï ÌëúÏ§Ä Ïª§Ìîº Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï§ë...');
    const standardCoffeesExists = await checkCollectionExists('standardCoffees');
    
    if (standardCoffeesExists) {
      console.log('‚ö†Ô∏è  ÌëúÏ§Ä Ïª§Ìîº Ïª¨Î†âÏÖòÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.');
    } else {
      for (const coffee of standardCoffees) {
        const { id, ...coffeeData } = coffee;
        await addDoc(collection(db, 'standardCoffees'), {
          originalId: id,
          ...coffeeData,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      console.log(`‚úÖ ${standardCoffees.length}Í∞úÏùò ÌëúÏ§Ä Ïª§Ìîº Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏôÑÎ£å`);
    }

    // 3. Ïª§Ìîº Ï†úÌíà Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
    console.log('\nüõçÔ∏è  Ïª§Ìîº Ï†úÌíà Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï§ë...');
    const coffeeProductsExists = await checkCollectionExists('coffeeProducts');
    
    if (coffeeProductsExists) {
      console.log('‚ö†Ô∏è  Ïª§Ìîº Ï†úÌíà Ïª¨Î†âÏÖòÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.');
    } else {
      for (const product of coffeeProducts) {
        const { id, lastUpdated, ...productData } = product;
        await addDoc(collection(db, 'coffeeProducts'), {
          originalId: id,
          ...productData,
          lastUpdated: lastUpdated,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }
      console.log(`‚úÖ ${coffeeProducts.length}Í∞úÏùò Ïª§Ìîº Ï†úÌíà Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏôÑÎ£å`);
    }

    console.log('\nüéâ Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
    console.log('\nüìä ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêú Îç∞Ïù¥ÌÑ∞:');
    console.log(`   - Î°úÏä§ÌÑ∞Î¶¨: ${roasteries.length}Í∞ú`);
    console.log(`   - ÌëúÏ§Ä Ïª§Ìîº: ${standardCoffees.length}Í∞ú`);
    console.log(`   - Ïª§Ìîº Ï†úÌíà: ${coffeeProducts.length}Í∞ú`);
    
  } catch (error) {
    console.error('‚ùå ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:', error);
    process.exit(1);
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  migrateData()
    .then(() => {
      console.log('\n‚ú® ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
      process.exit(1);
    });
}

export { migrateData }; 